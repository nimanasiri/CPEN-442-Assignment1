import q2_helpers
import sys
import math
import random
import numpy as np
import logging
import copy
from datetime import datetime
from fitness import total_fitness

random.seed(datetime.now())

if len(sys.argv) == 1:
    filename = "logfile.txt"
else:
    filename = sys.argv[1]

logging.basicConfig(level=logging.DEBUG, filename=filename, filemode="w",
        format="%(asctime)-15s %(levelname)-8s %(message)s")

ciphertext = "MKUMGEVPECYNELBLRLDPZOUMGEVPLSDQMILHVRQDRDPNMKYLVYHRSKRDPCNLLSMXGTMIXPKYZLEQTOVPSBMIZOMNECRTLHKGVDNIDMMKSACHRMAELPHIGTHLCEHTRTYDIXRLRXUMGEVPYVQNLKMIXPSLWSOXWPIXLSDQNHKMBRLIXHQIZOVSUHPNRDDPZOBPPCUXTORTGDMIXHECSLHRETXPSPYIZORVZRRXDSHRUMGEVPWSXYECSNPCIGKTHXQIZOLKSDMLLKKMLHECAPLARDPTQUKNIGRDLHMDXLRTVYVDSLYDGTEXKNVPUVQOMICPZLROZMIWZOXUZUCELPEQTOVPWSEIRXCMDQRXECZGBRLYETDYZTQOMKNHZELHXHMCRTYDBKGDMIXHSVREEDWSMFTOVPWSQYECOXRLXHTNDELSDQGTRTUZMIPQTOVPMIYVNHMILHNTSWEXTGZTCOBKGVTKIGTGECMIUZHXUZTOSBGKRXTGHKRMHCHXLYDSGDVDRXGRZUWSXLRTUZMIWASBHRLQVRXEIYKEZOMNWSXQZOIXECLKREQNSWZGIXRDBQEABSMCRTYDGYSLSVNTUMGEVPUZFKXDGRTOYNMIPSNTSPEUECXDGRGUUMGEVPWSQYECAPELBLWSEQDHDSXWWSXQRVZUPXDRUMMLDRXYDYSEZLMXCPRDSBLIHLMQRVHLDAGTMXMIRDRTYDIGECMCIGRDGUMIRDGRGUAPLSOXLPVDNTIMUMGEVPSLULNTIMSLMILHFKUMGEVPPNHQEPYLDMECCPRDSBLIHAZLSRDHSWZGIXRDBQEVWSHXDXTGCQGYSPYDIGRDLHMDXLRTUZMIPTVKGYSLMILCNTMIUZHXGUOXRLXHVPLUERMIYVIVGRTRNSMICPDQXERMQGECUZTORTYDGYSLHKPZRXDSHRPBSPKDWSLIZPURERXYDYNMCPHBTOVPSLQDXRMLDZMINSMXBLRXTGNSMICMXHMDUZQGECMEYSXZSLWSXHZUOTBKECYLUMGEVPYNMIZOVYUVQIGTKBWEZMDODYZUWSWPEOKVDEXMNASPMDMLDXTGMIRDXPSLKGSPKDCZGKMINHECYLUMGEVPCQYDMIYLDPLHWSLYKGHLWSETZOMIUMGEVPWSXYSLOCMEQSWFMXDOSPIGECECYLGUMILCNTMXIVTNWSYQTGSLRTUZMIWTPYRXCZGKMINHNSZGIXRDWSXQLPEUTOVPMIRLDPLHOQXKRXLBGZDAWSXEGRZRRXYVECLKSPEZDAWSLIMDYLSDIQTGMIXHMICPZOMIOTMLEQTOVPWSXLRTUZMIPILPDXSATKMCLSIDPVZKUMGEVPMIXMDRYVWSQYRDDKVBRXTGPNVZDRZTQUTOVPWSXYIPRTZTBKRLRHPCDYAPHSTGKBMEWSPABQBATKMCSLHKCEYLRLHCQMRXGTUMPCUXTOMILCNTECYLKVHKDMGRZRUMOUWVLPIXWSNARDRXSYTEZUTGIPUMGEVPMILHVPELBSIXPCRHRTYDSPMLUMPCGTZTQBZUECEARTGDMIRLDPLHRVZRRXYVECDOKMFOIMBQELDAUGLZBQELEVNSQORXTGMIXHLSDQMILMTKMCPNRDRXDQZTFODMMILHSDMLLKKMLHNTTGMICPUXTOMIXPHQHRXYDYMEGUMIRLLPIVUMGEVPPNXHTPKMBKXCRERVSKRDWSRISDEREIRDUMGEVPHKRDCHDSRXRTGYECDRQDQIZOMXGDMICPZLROZMIWZOXUZUCELPEQGKYDKFRXMILMTKMCRTGDMIYVNHPNRDDMECVTTRYNMQKMQGECKGDOKINHHLETXPECSHECVSXRPCVTTRQALPIXHLIGPCGTZTQUTOVPLSDQMIXMKDEXTGWVYSIGECDPLHRVZRRXYVECLKSPEZDAUMGEVPWSQYECAIPAHKXPSLMDELDSXWMIDMUOMIRTGDMIXHZKSLHREQTOVPPNYVRTZTFZNHEPDMTRVKXHETLCPBIOZRWSLSHBTOVPPNRDCPWPFKMDVPIXFKBECEXHDZZLCMTOVPHKLPSHPXDRXRZLHXIVDARTYDRTIGDSHRZTOUUMFKODPQTOVPSBMIZOMNDYNHKVCLZBYDBQEXTGWSQDPVKBDRZBIGCPYNELBVRXDRYLBQELDAZGDLDKRXTMRDTPCLNSVWAPAIVRGKTXTGMIRLDPLHYNSIRXMIDRDMHTLHUMGEVPWSQYECIGECIYOUHXRQYMTGECMCSDNSVWIXRTNXGTMIXCRVZUWSXDVRERLYUZFKLITUCRRDDAMIYVMIDPHLCPRXGTHLRLLMRDWZZLGTQGECUZTORTVYIXYVBSIVMIDPRVZRRXYVRTUZMIWPVWNSRTGYIPHKZOEXDQTGKNNBZUZTBZHIRXZKRTVQCMZBHLZTBZDRIVUZXWWSQDPVPXZSCLBPBKDPZOZLLPOXLPGYKYZLLYIXSYOTSXWPDSGDVDXMKDEXTGCQYIZOPXDRIVUZXWXHZOMNGTINELDVECYNUHRXYNMQKMQGECLPIVUMGEVPLSDQZK"
#ciphertext = "DUFEODSFPXFQDZUWODIDQTGPKMXODPBYAZZDFOEODWLFHFURPRRNAPIAURLUOAOMUKFZFQVLGONMQILDDPQRZWADLDIGLIURXFWZFZFQRHIUAPRPOUUQODGPKMXOURNHXVXOZDLDTVPRLTLDUXHFPRRDEONSEOFHEUPRRDZLOSDQQFAOEOIPIPSTURUOGPEZGHRKHCFQPDNHQIDIFHAXLQOFSERTQFAZOHOBDVVLAPHPAIPIULDOUHSOEOOMUTLQPHRDRKURDLSIDWFSOWPIIMGRONOMUFODTUAOTXGPKMXONAIULDXUGNRUBYWORTQFVPZNGOPRURFEGOAPQYMIXOEVAMPAGOCILDGHRKHCFHAMMIAPUPLDDSVXONAVMILDUXDZOFSETURUPIPOURFHLDDEAUOFOFAPDQQFPHLDAPAIAPRKURDETUHCNLTIVCXFFDVTGSAXXOHDZNQIOFZEAMPMDZSXSIURFHGPKMXOLDHFLWOYIANUONMUVMLNVXEOMUVMLNVXRKURFEMOZDVAHYOULIUPDUWDSFAPRKURQLLYGDQFRDADQHURDLSIDWAPEQLFUVLNQIVLNAVXYLYVMONHQILDIGADIPAXGPIWUIGSNXXVLFGDYBZWSRUCAPRKURFHFEFHDEAGDECSPRLTWDANVIFZFQBSXVAOVZVDMSHUGPKMXONUURPUPRDECUHFWDZWXVGOVITGRDEOYHPYGMYBAVHTUPAPUKOFBPANNMIVNDYBEVSNFHBSFHNDQFLFUVRDEOGPKMXOOFSZTIADNUURVXHFOFSZITVZGHOFCKYHXOLNDOONOFAEYHRKHQHFOHQILDUIFZWDOFSZYBLDDAPIDVTUHCFESVANNEODODXOVZYZIAPMGPKMXOIHDUGOVOEODSXVZCGOVOGDONZWUQFZFQVIFZFQXSQMPYMIXOOFOZHIBIITONGOXFMGLQLFUVVIPRFNHYIPDVTUHCNLTIYEIDRDZERGDZDPGDONMOURDZUVGPKMXOVISVATORITWDAPUQRTEDDUWDIPPAGDPMGOLNOVFHVLPRURWDUIOFLNOFSZFDHURNHYOULIUPGPKMXODUFQPITGDZGPIGONIPFSHALDVXVISISPQRLDWTFZFHWDCKNDDCWDLDRDZDLFUAFZFQAPRKURWLEFHFOMRPBUGNODURNLIAEQNACZDUDLOADVFSWBZWFQYBDZIPUYIQNHURFHEFHFURWLLFUVOBDVEZPIGOAXQCGPKMXOURWLDWNZDZSXSIRPPUDVVDDAAIPIULGPKMXOEUSNODSFDEVCIAEQLTHGAEAILDVXLNGPKMXODVURSILIURWLEFHFGPKMXODPAXVXDYAMPMOYPGMIXOXOWGLWXVDPEZFHAPRKURHFFEFHNZFQOFAPQFSFMIOFGPKMXOOFAOVZYEFHNDAZZELSHFABDWAZAPRKURWLNSHFIAIWZLPRPURDUIPDQHPOOBDVCDMGQIXAAMPISXAGQHLDTILDOAPYMIXONUURGHRKHCWZDEYDXVSIEOURWZITBOURPRUTQMEDADEFQHVLODURWLIMLFAZAPRKURDLPRDPQRLDZNQEFHWZYHQHLDGHRKHCFEMIOFDUPRFSBSRTHQGPKMXOOFADLDNSHFSFRTHQNMEQURPRRHONGODCFDUPAVMILDUAIDHYZDUAAPIPLFITUQFHWDATGOZCDZGHRKHCWDRPUAURPRCVUOHQQFOHQILDBYEGTMDZROIMEODAPIURNZFQEFHFAHWDDWOHWMYHQLMIXOANURWDOXWDRDZDODURNHIRPRPYMIXOOFSEAIFEDECDDGUOLDSZAMPIBSTURDZDQDIAVZGDWXYHFDRKURQHPSDAPIURNZFQGPKMXOAPIAURCUIDIYRUGPKMXOEFHFSXSIRPDPEZODIWYVDLFQUVGPKMXONAIUNSANURNZRDSZFDHADAPIUYRKURDETUHCFEMIOFFSDASIKUEDABOBTYIDEZFHAPURFHAXLQFSPYAGFHDZNUURFUGOZCWDGPKMXOLDIRORUFODQFXVVLEUTUQLMIXOOFADLDFSCZDZVXURFHPURNEVLSPIEUFQURWDQDNDDCDZHFEQFDIULDIDYBFELDHFAPIAURWSODPUOFOHONGOURDZAMAIFSLYMIXOURWLSOYBDZOFSERTDSFHDZOXMOCILDBODELFPYMIXOODRNXAVXHOIPGPZNAXIULDHAPIUYRKURDETUHCNDEZNSXOQEDVZQSHKCPAAIPIULGPKMXOXOZDDVSNMSFSEODOHOGPKMXOGOODEFQHGATGWLSIXVFEDEGPZNGPKMXOIMPUOMZYWDAILQHFABPYMIXOIPURDEOFAPQRLDBIQGTZGODAPIEFXVWDMNVXHQWRCHSGSINAIRXFGOCMHGEDPHLDNUQTDZNUCQIDQRLDFDPUGPKMXOOFAEAIDWRKUTONSITANDDCFNHFFNIAKZMOAOLNAPHPAIPIULGHPUFQDZIPURUODSFZQLUETUUEMOZDHAPIEUPRGPHYPHLDGHRKHCFEMIOFSPABOUZYGBFDWMLYDVGHONLDVXDPTVFHWDPYMIXOOFADSVGOYOLDRDPZHGEDPHLDNUQTDZNUCQIDQRLDFDPUAPIAURWSODOFGOOMLQQIGPKMXORDIXEDABDYTUHCNLTIVYMIXOEUDIOAZWFQVPVRITDZUWPVLYGDQFXOWGIGEDAWIAZIMIFDEODUDLOAQFLFTXHGEDAOWGURGONGFOVZELFHGHNF"

key = [['A','B','C','D','E'],['F','G','H','I','K'],['L','M','N','O','P'],['Q','R','S','T','U'],['V','W','X','Y','Z']]

GOAL_FITNESS = -3527
max_fitness = -sys.maxsize - 1

while max_fitness < GOAL_FITNESS:
    logging.info("Starting with a new key")

    # Swap two random characters, rows, cols, complete shuffle
    q2_helpers.new_key(key)

    pt = ''.join(q2_helpers.decode(key, ciphertext))

    #max_fitness = total_fitness(pt)
    max_fitness = q2_helpers.fitness(pt)
    max_key = copy.deepcopy(key)


    TEMP = 20
    STEP = 0.2
    COUNT = 3000

    for temp in np.arange(TEMP, 0, -STEP):
        logging.info("Current Max: {}".format(max_fitness))
        logging.info("Max Key: {}".format(max_key))

        for count in range(COUNT, 0, -1):
            
            q2_helpers.scramble_key(key)

            pt = ''.join(q2_helpers.decode(key, ciphertext))

            fitness = q2_helpers.fitness(pt)

            dF = fitness - max_fitness


            if dF > 0:
                max_fitness = fitness
                max_key = copy.deepcopy(key)
                if max_fitness > GOAL_FITNESS:
                    logging.info("I FOUND IT")
                    logging.info("Final Fitness: {}".format(max_fitness))
                    logging.info("Final Key: {}".format(max_key))
                    exit()
            elif dF < 0 and random.uniform(0,1) <= math.exp(dF / temp):
                max_fitness = fitness
                max_key = copy.deepcopy(key)
            else:
                key = copy.deepcopy(max_key)