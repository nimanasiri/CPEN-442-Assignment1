import q2_helpers
import sys
import math
import random
import numpy as np
import logging
import copy
from datetime import datetime

random.seed(datetime.now())

logging.basicConfig(level=logging.DEBUG, filename=sys.argv[1], filemode="w",
        format="%(asctime)-15s %(levelname)-8s %(message)s")

#ciphertext = "MKUMGEVPECYNELBLRLDPZOUMGEVPLSDQMILHVRQDRDPNMKYLVYHRSKRDPCNLLSMXGTMIXPKYZLEQTOVPSBMIZOMNECRTLHKGVDNIDMMKSACHRMAELPHIGTHLCEHTRTYDIXRLRXUMGEVPYVQNLKMIXPSLWSOXWPIXLSDQNHKMBRLIXHQIZOVSUHPNRDDPZOBPPCUXTORTGDMIXHECSLHRETXPSPYIZORVZRRXDSHRUMGEVPWSXYECSNPCIGKTHXQIZOLKSDMLLKKMLHECAPLARDPTQUKNIGRDLHMDXLRTVYVDSLYDGTEXKNVPUVQOMICPZLROZMIWZOXUZUCELPEQTOVPWSEIRXCMDQRXECZGBRLYETDYZTQOMKNHZELHXHMCRTYDBKGDMIXHSVREEDWSMFTOVPWSQYECOXRLXHTNDELSDQGTRTUZMIPQTOVPMIYVNHMILHNTSWEXTGZTCOBKGVTKIGTGECMIUZHXUZTOSBGKRXTGHKRMHCHXLYDSGDVDRXGRZUWSXLRTUZMIWASBHRLQVRXEIYKEZOMNWSXQZOIXECLKREQNSWZGIXRDBQEABSMCRTYDGYSLSVNTUMGEVPUZFKXDGRTOYNMIPSNTSPEUECXDGRGUUMGEVPWSQYECAPELBLWSEQDHDSXWWSXQRVZUPXDRUMMLDRXYDYSEZLMXCPRDSBLIHLMQRVHLDAGTMXMIRDRTYDIGECMCIGRDGUMIRDGRGUAPLSOXLPVDNTIMUMGEVPSLULNTIMSLMILHFKUMGEVPPNHQEPYLDMECCPRDSBLIHAZLSRDHSWZGIXRDBQEVWSHXDXTGCQGYSPYDIGRDLHMDXLRTUZMIPTVKGYSLMILCNTMIUZHXGUOXRLXHVPLUERMIYVIVGRTRNSMICPDQXERMQGECUZTORTYDGYSLHKPZRXDSHRPBSPKDWSLIZPURERXYDYNMCPHBTOVPSLQDXRMLDZMINSMXBLRXTGNSMICMXHMDUZQGECMEYSXZSLWSXHZUOTBKECYLUMGEVPYNMIZOVYUVQIGTKBWEZMDODYZUWSWPEOKVDEXMNASPMDMLDXTGMIRDXPSLKGSPKDCZGKMINHECYLUMGEVPCQYDMIYLDPLHWSLYKGHLWSETZOMIUMGEVPWSXYSLOCMEQSWFMXDOSPIGECECYLGUMILCNTMXIVTNWSYQTGSLRTUZMIWTPYRXCZGKMINHNSZGIXRDWSXQLPEUTOVPMIRLDPLHOQXKRXLBGZDAWSXEGRZRRXYVECLKSPEZDAWSLIMDYLSDIQTGMIXHMICPZOMIOTMLEQTOVPWSXLRTUZMIPILPDXSATKMCLSIDPVZKUMGEVPMIXMDRYVWSQYRDDKVBRXTGPNVZDRZTQUTOVPWSXYIPRTZTBKRLRHPCDYAPHSTGKBMEWSPABQBATKMCSLHKCEYLRLHCQMRXGTUMPCUXTOMILCNTECYLKVHKDMGRZRUMOUWVLPIXWSNARDRXSYTEZUTGIPUMGEVPMILHVPELBSIXPCRHRTYDSPMLUMPCGTZTQBZUECEARTGDMIRLDPLHRVZRRXYVECDOKMFOIMBQELDAUGLZBQELEVNSQORXTGMIXHLSDQMILMTKMCPNRDRXDQZTFODMMILHSDMLLKKMLHNTTGMICPUXTOMIXPHQHRXYDYMEGUMIRLLPIVUMGEVPPNXHTPKMBKXCRERVSKRDWSRISDEREIRDUMGEVPHKRDCHDSRXRTGYECDRQDQIZOMXGDMICPZLROZMIWZOXUZUCELPEQGKYDKFRXMILMTKMCRTGDMIYVNHPNRDDMECVTTRYNMQKMQGECKGDOKINHHLETXPECSHECVSXRPCVTTRQALPIXHLIGPCGTZTQUTOVPLSDQMIXMKDEXTGWVYSIGECDPLHRVZRRXYVECLKSPEZDAUMGEVPWSQYECAIPAHKXPSLMDELDSXWMIDMUOMIRTGDMIXHZKSLHREQTOVPPNYVRTZTFZNHEPDMTRVKXHETLCPBIOZRWSLSHBTOVPPNRDCPWPFKMDVPIXFKBECEXHDZZLCMTOVPHKLPSHPXDRXRZLHXIVDARTYDRTIGDSHRZTOUUMFKODPQTOVPSBMIZOMNDYNHKVCLZBYDBQEXTGWSQDPVKBDRZBIGCPYNELBVRXDRYLBQELDAZGDLDKRXTMRDTPCLNSVWAPAIVRGKTXTGMIRLDPLHYNSIRXMIDRDMHTLHUMGEVPWSQYECIGECIYOUHXRQYMTGECMCSDNSVWIXRTNXGTMIXCRVZUWSXDVRERLYUZFKLITUCRRDDAMIYVMIDPHLCPRXGTHLRLLMRDWZZLGTQGECUZTORTVYIXYVBSIVMIDPRVZRRXYVRTUZMIWPVWNSRTGYIPHKZOEXDQTGKNNBZUZTBZHIRXZKRTVQCMZBHLZTBZDRIVUZXWWSQDPVPXZSCLBPBKDPZOZLLPOXLPGYKYZLLYIXSYOTSXWPDSGDVDXMKDEXTGCQYIZOPXDRIVUZXWXHZOMNGTINELDVECYNUHRXYNMQKMQGECLPIVUMGEVPLSDQZK"
ciphertext = "DUFEODSFPXFQDZUWODIDQTGPKMXODPBYAZZDFOEODWLFHFURPRRNAPIAURLUOAOMUKFZFQVLGONMQILDDPQRZWADLDIGLIURXFWZFZFQRHIUAPRPOUUQODGPKMXOURNHXVXOZDLDTVPRLTLDUXHFPRRDEONSEOFHEUPRRDZLOSDQQFAOEOIPIPSTURUOGPEZGHRKHCFQPDNHQIDIFHAXLQOFSERTQFAZOHOBDVVLAPHPAIPIULDOUHSOEOOMUTLQPHRDRKURDLSIDWFSOWPIIMGRONOMUFODTUAOTXGPKMXONAIULDXUGNRUBYWORTQFVPZNGOPRURFEGOAPQYMIXOEVAMPAGOCILDGHRKHCFHAMMIAPUPLDDSVXONAVMILDUXDZOFSETURUPIPOURFHLDDEAUOFOFAPDQQFPHLDAPAIAPRKURDETUHCNLTIVCXFFDVTGSAXXOHDZNQIOFZEAMPMDZSXSIURFHGPKMXOLDHFLWOYIANUONMUVMLNVXEOMUVMLNVXRKURFEMOZDVAHYOULIUPDUWDSFAPRKURQLLYGDQFRDADQHURDLSIDWAPEQLFUVLNQIVLNAVXYLYVMONHQILDIGADIPAXGPIWUIGSNXXVLFGDYBZWSRUCAPRKURFHFEFHDEAGDECSPRLTWDANVIFZFQBSXVAOVZVDMSHUGPKMXONUURPUPRDECUHFWDZWXVGOVITGRDEOYHPYGMYBAVHTUPAPUKOFBPANNMIVNDYBEVSNFHBSFHNDQFLFUVRDEOGPKMXOOFSZTIADNUURVXHFOFSZITVZGHOFCKYHXOLNDOONOFAEYHRKHQHFOHQILDUIFZWDOFSZYBLDDAPIDVTUHCFESVANNEODODXOVZYZIAPMGPKMXOIHDUGOVOEODSXVZCGOVOGDONZWUQFZFQVIFZFQXSQMPYMIXOOFOZHIBIITONGOXFMGLQLFUVVIPRFNHYIPDVTUHCNLTIYEIDRDZERGDZDPGDONMOURDZUVGPKMXOVISVATORITWDAPUQRTEDDUWDIPPAGDPMGOLNOVFHVLPRURWDUIOFLNOFSZFDHURNHYOULIUPGPKMXODUFQPITGDZGPIGONIPFSHALDVXVISISPQRLDWTFZFHWDCKNDDCWDLDRDZDLFUAFZFQAPRKURWLEFHFOMRPBUGNODURNLIAEQNACZDUDLOADVFSWBZWFQYBDZIPUYIQNHURFHEFHFURWLLFUVOBDVEZPIGOAXQCGPKMXOURWLDWNZDZSXSIRPPUDVVDDAAIPIULGPKMXOEUSNODSFDEVCIAEQLTHGAEAILDVXLNGPKMXODVURSILIURWLEFHFGPKMXODPAXVXDYAMPMOYPGMIXOXOWGLWXVDPEZFHAPRKURHFFEFHNZFQOFAPQFSFMIOFGPKMXOOFAOVZYEFHNDAZZELSHFABDWAZAPRKURWLNSHFIAIWZLPRPURDUIPDQHPOOBDVCDMGQIXAAMPISXAGQHLDTILDOAPYMIXONUURGHRKHCWZDEYDXVSIEOURWZITBOURPRUTQMEDADEFQHVLODURWLIMLFAZAPRKURDLPRDPQRLDZNQEFHWZYHQHLDGHRKHCFEMIOFDUPRFSBSRTHQGPKMXOOFADLDNSHFSFRTHQNMEQURPRRHONGODCFDUPAVMILDUAIDHYZDUAAPIPLFITUQFHWDATGOZCDZGHRKHCWDRPUAURPRCVUOHQQFOHQILDBYEGTMDZROIMEODAPIURNZFQEFHFAHWDDWOHWMYHQLMIXOANURWDOXWDRDZDODURNHIRPRPYMIXOOFSEAIFEDECDDGUOLDSZAMPIBSTURDZDQDIAVZGDWXYHFDRKURQHPSDAPIURNZFQGPKMXOAPIAURCUIDIYRUGPKMXOEFHFSXSIRPDPEZODIWYVDLFQUVGPKMXONAIUNSANURNZRDSZFDHADAPIUYRKURDETUHCFEMIOFFSDASIKUEDABOBTYIDEZFHAPURFHAXLQFSPYAGFHDZNUURFUGOZCWDGPKMXOLDIRORUFODQFXVVLEUTUQLMIXOOFADLDFSCZDZVXURFHPURNEVLSPIEUFQURWDQDNDDCDZHFEQFDIULDIDYBFELDHFAPIAURWSODPUOFOHONGOURDZAMAIFSLYMIXOURWLSOYBDZOFSERTDSFHDZOXMOCILDBODELFPYMIXOODRNXAVXHOIPGPZNAXIULDHAPIUYRKURDETUHCNDEZNSXOQEDVZQSHKCPAAIPIULGPKMXOXOZDDVSNMSFSEODOHOGPKMXOGOODEFQHGATGWLSIXVFEDEGPZNGPKMXOIMPUOMZYWDAILQHFABPYMIXOIPURDEOFAPQRLDBIQGTZGODAPIEFXVWDMNVXHQWRCHSGSINAIRXFGOCMHGEDPHLDNUQTDZNUCQIDQRLDFDPUGPKMXOOFAEAIDWRKUTONSITANDDCFNHFFNIAKZMOAOLNAPHPAIPIULGHPUFQDZIPURUODSFZQLUETUUEMOZDHAPIEUPRGPHYPHLDGHRKHCFEMIOFSPABOUZYGBFDWMLYDVGHONLDVXDPTVFHWDPYMIXOOFADSVGOYOLDRDPZHGEDPHLDNUQTDZNUCQIDQRLDFDPUAPIAURWSODOFGOOMLQQIGPKMXORDIXEDABDYTUHCNLTIVYMIXOEUDIOAZWFQVPVRITDZUWPVLYGDQFXOWGIGEDAWIAZIMIFDEODUDLOAQFLFTXHGEDAOWGURGONGFOVZELFHGHNF"

#key = [['U','Q','F','B','C'],['O','T','G','V','M'],['Z','Y','W','A','P'],['K','I','N','S','H'],['R','D','X','L','E']]
#key = [['T','G','V','M','O'],['Y','W','A','P','Z'],['I','N','S','H','K'],['D','X','L','E','R'],['Q','F','B','C','U']]
key = [['A','B','C','D','E'],['F','G','H','I','K'],['L','M','N','O','P'],['Q','R','S','T','U'],['V','W','X','Y','Z']]

ultimate_max = -3527
max_fitness = -sys.maxsize - 1

while max_fitness < ultimate_max:
    logging.info("I BROKE OUT\n\n\n")

    # Swap two random characters, rows, cols, complete shuffle
    q2_helpers.new_key(key)

    pt = ''.join(q2_helpers.decode(key, ciphertext))

    max_fitness = q2_helpers.fitness(pt)
    max_key = copy.deepcopy(key)
    logging.info("max_key id: {}".format(id(max_key)))
    logging.info("regular key id: {}".format(id(key)))

    if max_fitness > ultimate_max:
        logging.info("I FOUND IT")
        logging.info("Current Max: {}".format(max_fitness))
        logging.info("Max Key: {}".format(max_key))
        um_pt = str(pt)
        um_fitness = max_fitness
        um_key = copy.deepcopy(key)


    TEMP = 20
    STEP = 0.2
    COUNT = 3000

    logging.info("TEMP = {}".format(TEMP))
    logging.info("STEP = {}".format(STEP))
    logging.info("COUNT= {}".format(COUNT))

    for temp in np.arange(TEMP, 0, -STEP):
        logging.info("Current Loop: {}".format(temp))
        logging.info("Current Max: {}".format(max_fitness))
        logging.info("Max Key: {}".format(max_key))

        for count in range(COUNT, 0, -1):
            
            q2_helpers.scramble_key(key)

            pt = ''.join(q2_helpers.decode(key, ciphertext))

            fitness = q2_helpers.fitness(pt)

            dF = fitness - max_fitness


            if dF > 0:
                max_fitness = fitness
                max_key = copy.deepcopy(key)
                if fitness > ultimate_max:
                    logging.info("I FOUND IT")
                    logging.info("Current Max: {}".format(max_fitness))
                    logging.info("Max Key: {}".format(max_key))
                    um_pt = str(pt)
                    um_fitness = fitness
                    um_key = copy.deepcopy(key)
            elif dF < 0 and random.uniform(0,1) <= math.exp(dF / temp):
                max_fitness = fitness
                max_key = copy.deepcopy(key)
            else:
                key = copy.deepcopy(max_key)


print("max_fitness ", um_fitness)
print(um_key)
print(um_pt)